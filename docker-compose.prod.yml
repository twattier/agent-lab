version: '3.8'

# Production environment configuration for AgentLab
# Security hardened with performance optimizations

networks:
  agentlab-frontend:
    driver: bridge
    driver_opts:
      encrypted: 'true'
    ipam:
      config:
        - subnet: 172.22.0.0/24
  agentlab-backend:
    driver: bridge
    driver_opts:
      encrypted: 'true'
    internal: true
    ipam:
      config:
        - subnet: 172.22.1.0/24
  agentlab-database:
    driver: bridge
    driver_opts:
      encrypted: 'true'
    internal: true
    ipam:
      config:
        - subnet: 172.22.2.0/24

volumes:
  postgres_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/agentlab/data/postgres
  redis_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/agentlab/data/redis
  nginx_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/agentlab/logs/nginx

secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt
  redis_password:
    file: ./secrets/redis_password.txt
  nextauth_secret:
    file: ./secrets/nextauth_secret.txt
  claude_api_key:
    file: ./secrets/claude_api_key.txt
  ssl_certificate:
    file: ./secrets/ssl_certificate.crt
  ssl_private_key:
    file: ./secrets/ssl_private_key.key
  grafana_password:
    file: ./secrets/grafana_password.txt

services:
  postgres:
    image: postgres:15.4
    container_name: agentlab-postgres-prod
    restart: always
    environment:
      POSTGRES_DB: agentlab
      POSTGRES_USER: agentlab_user
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_INITDB_ARGS: '--encoding=UTF-8 --lc-collate=en_US.UTF-8 --lc-ctype=en_US.UTF-8'
    secrets:
      - postgres_password
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./infrastructure/postgres/init:/docker-entrypoint-initdb.d
      - ./infrastructure/postgres/prod-backup:/var/lib/postgresql/backup
    networks:
      agentlab-database:
        ipv4_address: 172.22.2.10
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U agentlab_user -d agentlab']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    read_only: true
    tmpfs:
      - /tmp
      - /var/run/postgresql
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    command: >
      postgres
      -c shared_preload_libraries=vector
      -c max_connections=200
      -c shared_buffers=1GB
      -c effective_cache_size=3GB
      -c maintenance_work_mem=256MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=32MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=16MB
      -c min_wal_size=2GB
      -c max_wal_size=8GB
      -c max_worker_processes=8
      -c max_parallel_workers_per_gather=4
      -c max_parallel_workers=8
      -c logging_collector=on
      -c log_destination=stderr
      -c log_directory=/var/log/postgresql
      -c log_filename=postgresql-%Y-%m-%d_%H%M%S.log
      -c log_rotation_age=1d
      -c log_rotation_size=100MB

  redis:
    image: redis:7.0-alpine
    container_name: agentlab-redis-prod
    restart: always
    environment:
      REDIS_PASSWORD_FILE: /run/secrets/redis_password
    secrets:
      - redis_password
    volumes:
      - redis_prod_data:/data
      - ./infrastructure/redis/redis-prod.conf:/usr/local/etc/redis/redis.conf
    networks:
      agentlab-backend:
        ipv4_address: 172.22.1.11
    healthcheck:
      test: ['CMD', 'redis-cli', '--raw', 'incr', 'ping']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    read_only: true
    tmpfs:
      - /tmp
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    command: >
      sh -c "
      export REDIS_PASSWORD=$$(cat /run/secrets/redis_password) &&
      redis-server /usr/local/etc/redis/redis.conf --requirepass $$REDIS_PASSWORD
      "

  api:
    image: agentlab/api:${IMAGE_TAG:-latest}
    container_name: agentlab-api-prod
    restart: always
    environment:
      DATABASE_URL_FILE: /run/secrets/database_url
      REDIS_URL_FILE: /run/secrets/redis_url
      ENV: production
      DEBUG: 'false'
      LOG_LEVEL: info
      CLAUDE_API_KEY_FILE: /run/secrets/claude_api_key
      WORKERS: 4
      MAX_REQUESTS: 1000
      MAX_REQUESTS_JITTER: 100
      TIMEOUT: 120
      KEEPALIVE: 2
    secrets:
      - postgres_password
      - redis_password
      - claude_api_key
    volumes:
      - ./infrastructure/logs:/app/logs
      - /app/api/__pycache__ # Exclude cache directory
    networks:
      agentlab-backend:
        ipv4_address: 172.22.1.13
      agentlab-database:
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8000/health']
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 90s
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    read_only: true
    tmpfs:
      - /tmp
      - /app/logs
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  web:
    image: agentlab/web:${IMAGE_TAG:-latest}
    container_name: agentlab-web-prod
    restart: always
    environment:
      NEXT_PUBLIC_API_URL: https://${DOMAIN_NAME:-agentlab.local}/api
      NEXTAUTH_URL: https://${DOMAIN_NAME:-agentlab.local}
      NEXTAUTH_SECRET_FILE: /run/secrets/nextauth_secret
      NODE_ENV: production
      NEXT_TELEMETRY_DISABLED: 1
    secrets:
      - nextauth_secret
    networks:
      agentlab-backend:
        ipv4_address: 172.22.1.14
      agentlab-frontend:
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/api/health']
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 90s
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    read_only: true
    tmpfs:
      - /tmp
      - /app/.next/cache
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  nginx:
    image: nginx:1.25-alpine
    container_name: agentlab-nginx-prod
    restart: always
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./infrastructure/nginx/nginx-prod.conf:/etc/nginx/nginx.conf:ro
      - ./infrastructure/nginx/conf.d/agentlab-prod.conf:/etc/nginx/conf.d/default.conf:ro
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl:ro
      - ./apps/web/public:/var/www/public:ro
      - nginx_logs:/var/log/nginx
    secrets:
      - ssl_certificate
      - ssl_private_key
    networks:
      agentlab-frontend:
        ipv4_address: 172.22.0.12
    depends_on:
      web:
        condition: service_healthy
      api:
        condition: service_healthy
    healthcheck:
      test:
        [
          'CMD',
          'wget',
          '--no-verbose',
          '--tries=1',
          '--spider',
          'https://localhost/health',
        ]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 60s
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    read_only: true
    tmpfs:
      - /tmp
      - /var/cache/nginx
      - /var/run
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # Production monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: agentlab-prometheus-prod
    restart: always
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=90d'
      - '--storage.tsdb.retention.size=10GB'
    volumes:
      - ./infrastructure/monitoring/prometheus-prod.yml:/etc/prometheus/prometheus.yml:ro
      - ./infrastructure/monitoring/data/prometheus:/prometheus
    networks:
      - agentlab-backend
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  grafana:
    image: grafana/grafana:latest
    container_name: agentlab-grafana-prod
    restart: always
    environment:
      GF_SECURITY_ADMIN_PASSWORD_FILE: /run/secrets/grafana_password
      GF_SECURITY_DISABLE_GRAVATAR: 'true'
      GF_SECURITY_STRICT_TRANSPORT_SECURITY: 'true'
      GF_SECURITY_COOKIE_SECURE: 'true'
      GF_SECURITY_COOKIE_SAMESITE: 'strict'
      GF_SECURITY_CONTENT_TYPE_PROTECTION: 'true'
      GF_SECURITY_X_CONTENT_TYPE_OPTIONS: 'true'
      GF_SECURITY_X_XSS_PROTECTION: 'true'
      GF_SERVER_ROOT_URL: https://${DOMAIN_NAME:-agentlab.local}/grafana/
    secrets:
      - grafana_password
    volumes:
      - ./infrastructure/monitoring/grafana-prod:/var/lib/grafana
      - ./infrastructure/monitoring/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./infrastructure/monitoring/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - agentlab-backend
    depends_on:
      - prometheus
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
