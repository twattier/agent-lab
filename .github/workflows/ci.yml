name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.17.0'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run Prettier
        run: npm run format:check

  python-quality:
    name: Python Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Python dependencies
        working-directory: ./apps/api
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Run black
        working-directory: ./apps/api
        run: black --check .

      - name: Run isort
        working-directory: ./apps/api
        run: isort --check-only .

      - name: Run flake8
        working-directory: ./apps/api
        run: flake8 .

      - name: Run mypy
        working-directory: ./apps/api
        run: mypy .

  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: pgvector/pgvector:pg15
        env:
          POSTGRES_USER: agentlab
          POSTGRES_PASSWORD: agentlab
          POSTGRES_DB: agentlab
        ports:
          - 5434:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Python dependencies
        working-directory: ./apps/api
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Run backend tests
        working-directory: ./apps/api
        env:
          DATABASE_URL: postgresql+asyncpg://agentlab:agentlab@localhost:5434/agentlab
        run: |
          pytest tests/ -v --cov=. --cov-report=xml --cov-report=term-missing

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./apps/api/coverage.xml
          flags: backend
          name: backend-coverage

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.17.0'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run frontend tests
        working-directory: ./apps/web
        run: npx vitest run --coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./apps/web/coverage/coverage-final.json
          flags: frontend
          name: frontend-coverage

  type-check:
    name: Type Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.17.0'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run type check
        run: npm run type-check

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    services:
      postgres:
        image: pgvector/pgvector:pg15
        env:
          POSTGRES_USER: agentlab
          POSTGRES_PASSWORD: agentlab
          POSTGRES_DB: agentlab
        ports:
          - 5434:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.17.0'
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: npm ci

      - name: Install Python dependencies
        working-directory: ./apps/api
        run: |
          python -m pip install --upgrade pip
          pip install -e .

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps chromium

      - name: Start services
        env:
          DATABASE_URL: postgresql+asyncpg://agentlab:agentlab@localhost:5434/agentlab
        run: |
          npm run dev &
          sleep 30

      - name: Run Playwright tests
        run: npm run test:e2e

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.17.0'
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: npm ci

      - name: Install Python dependencies
        working-directory: ./apps/api
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
          pip install safety

      - name: Run npm audit
        run: |
          # Audit and capture results
          npm audit --audit-level=moderate --json > npm-audit-results.json || true

          # Check for critical/high vulnerabilities
          CRITICAL_HIGH=$(cat npm-audit-results.json | grep -o '"severity":"critical"\|"severity":"high"' | wc -l || echo "0")

          if [ "$CRITICAL_HIGH" -gt 0 ]; then
            echo "::warning::Found $CRITICAL_HIGH critical/high severity npm vulnerabilities"
            npm audit --audit-level=moderate
            # Uncomment to fail on critical/high vulnerabilities:
            # exit 1
          fi

      - name: Run Python safety check
        working-directory: ./apps/api
        run: |
          # Run safety check and capture results
          safety check --json > safety-results.json || true

          # Check for vulnerabilities
          if grep -q '"vulnerabilities_found":' safety-results.json 2>/dev/null; then
            VULN_COUNT=$(grep -o '"vulnerabilities_found": [0-9]*' safety-results.json | grep -o '[0-9]*' || echo "0")
            if [ "$VULN_COUNT" -gt 0 ]; then
              echo "::warning::Found $VULN_COUNT Python package vulnerabilities"
              safety check
              # Uncomment to fail on vulnerabilities:
              # exit 1
            fi
          fi
