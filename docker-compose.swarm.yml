version: '3.8'

# Docker Swarm production configuration for AgentLab
# Designed for high availability and scalability

networks:
  agentlab-frontend:
    driver: overlay
    driver_opts:
      encrypted: 'true'
  agentlab-backend:
    driver: overlay
    driver_opts:
      encrypted: 'true'
  agentlab-database:
    driver: overlay
    driver_opts:
      encrypted: 'true'

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local

configs:
  nginx_config:
    file: ./infrastructure/nginx/nginx.conf
  nginx_agentlab_config:
    file: ./infrastructure/nginx/conf.d/agentlab.conf
  redis_config:
    file: ./infrastructure/redis/redis.conf

secrets:
  postgres_password:
    external: true
  redis_password:
    external: true
  nextauth_secret:
    external: true
  claude_api_key:
    external: true

services:
  postgres:
    image: postgres:15.4
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    environment:
      POSTGRES_DB: agentlab
      POSTGRES_USER: agentlab_user
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_INITDB_ARGS: '--encoding=UTF-8 --lc-collate=en_US.UTF-8 --lc-ctype=en_US.UTF-8'
    secrets:
      - postgres_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - agentlab-database
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U agentlab_user -d agentlab']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: >
      postgres
      -c shared_preload_libraries=vector
      -c max_connections=200
      -c shared_buffers=512MB
      -c effective_cache_size=2GB
      -c maintenance_work_mem=128MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200

  redis:
    image: redis:7.0-alpine
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 60s
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    configs:
      - source: redis_config
        target: /usr/local/etc/redis/redis.conf
    secrets:
      - redis_password
    volumes:
      - redis_data:/data
    networks:
      - agentlab-backend
    healthcheck:
      test: ['CMD', 'redis-cli', '--raw', 'incr', 'ping']
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    command: >
      sh -c "
      export REDIS_PASSWORD=$$(cat /run/secrets/redis_password) &&
      redis-server /usr/local/etc/redis/redis.conf --requirepass $$REDIS_PASSWORD
      "

  api:
    image: agentlab/api:${IMAGE_TAG:-latest}
    deploy:
      replicas: 3
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        order: start-first
      rollback_config:
        parallelism: 1
        delay: 10s
        failure_action: pause
        order: stop-first
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 60s
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    environment:
      DATABASE_URL: postgresql://agentlab_user@postgres:5432/agentlab
      REDIS_URL: redis://redis:6379
      ENV: production
      DEBUG: 'false'
      LOG_LEVEL: info
    secrets:
      - source: postgres_password
        target: /run/secrets/postgres_password
      - source: redis_password
        target: /run/secrets/redis_password
      - source: claude_api_key
        target: /run/secrets/claude_api_key
    networks:
      - agentlab-backend
      - agentlab-database
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8000/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  web:
    image: agentlab/web:${IMAGE_TAG:-latest}
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        order: start-first
      rollback_config:
        parallelism: 1
        delay: 10s
        failure_action: pause
        order: stop-first
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 60s
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    environment:
      NEXT_PUBLIC_API_URL: https://api.agentlab.local
      NEXTAUTH_URL: https://agentlab.local
      NODE_ENV: production
      NEXT_TELEMETRY_DISABLED: 1
    secrets:
      - source: nextauth_secret
        target: /run/secrets/nextauth_secret
    networks:
      - agentlab-frontend
      - agentlab-backend
    depends_on:
      - api
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/api/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  nginx:
    image: nginx:1.25-alpine
    deploy:
      replicas: 2
      placement:
        constraints:
          - node.role == manager
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 60s
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: ingress
      - target: 443
        published: 443
        protocol: tcp
        mode: ingress
    configs:
      - source: nginx_config
        target: /etc/nginx/nginx.conf
      - source: nginx_agentlab_config
        target: /etc/nginx/conf.d/agentlab.conf
    volumes:
      - nginx_logs:/var/log/nginx
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - agentlab-frontend
    depends_on:
      - web
      - api
    healthcheck:
      test:
        [
          'CMD',
          'wget',
          '--no-verbose',
          '--tries=1',
          '--spider',
          'http://localhost/health',
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Monitoring and logging (optional)
  prometheus:
    image: prom/prometheus:latest
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - agentlab-backend
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:latest
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    volumes:
      - ./infrastructure/monitoring/grafana:/var/lib/grafana
    networks:
      - agentlab-backend
    depends_on:
      - prometheus
