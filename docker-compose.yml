version: '3.8'

networks:
  agentlab-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  node_modules_cache:
    driver: local

services:
  postgres:
    image: postgres:15.4
    container_name: agentlab-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-agentlab}
      POSTGRES_USER: ${POSTGRES_USER:-agentlab_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-agentlab_password}
      POSTGRES_INITDB_ARGS: '--encoding=UTF-8 --lc-collate=en_US.UTF-8 --lc-ctype=en_US.UTF-8'
    ports:
      - '${POSTGRES_PORT:-5432}:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/postgres/init:/docker-entrypoint-initdb.d
    networks:
      agentlab-network:
        ipv4_address: 172.20.0.10
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    command: >
      postgres
      -c shared_preload_libraries=vector
      -c max_connections=100
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100

  redis:
    image: redis:7.0-alpine
    container_name: agentlab-redis
    restart: unless-stopped
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-agentlab_redis_password}
    ports:
      - '${REDIS_PORT:-6379}:6379'
    volumes:
      - redis_data:/data
      - ./infrastructure/redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      agentlab-network:
        ipv4_address: 172.20.0.11
    healthcheck:
      test: ['CMD', 'redis-cli', '--raw', 'incr', 'ping']
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    command: redis-server /usr/local/etc/redis/redis.conf --requirepass $${REDIS_PASSWORD}
    security_opt:
      - no-new-privileges:true
    user: '999:999'

  nginx:
    image: nginx:1.25-alpine
    container_name: agentlab-nginx
    restart: unless-stopped
    ports:
      - '${HTTP_PORT:-80}:80'
      - '${HTTPS_PORT:-443}:443'
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infrastructure/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl:ro
      - ./apps/web/public:/var/www/public:ro
    networks:
      agentlab-network:
        ipv4_address: 172.20.0.12
    depends_on:
      api:
        condition: service_healthy
      web:
        condition: service_started
    healthcheck:
      test:
        [
          'CMD',
          'wget',
          '--no-verbose',
          '--tries=1',
          '--spider',
          'http://localhost/health',
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    security_opt:
      - no-new-privileges:true
    user: '101:101'

  api:
    build:
      context: .
      dockerfile: ./infrastructure/docker/api/Dockerfile
      target: development
    container_name: agentlab-api
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-agentlab_user}:${POSTGRES_PASSWORD:-agentlab_password}@postgres:5432/${POSTGRES_DB:-agentlab}
      REDIS_URL: redis://:${REDIS_PASSWORD:-agentlab_redis_password}@redis:6379
      ENV: ${ENV:-development}
      DEBUG: ${DEBUG:-true}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      CLAUDE_API_KEY: ${CLAUDE_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      OLLAMA_BASE_URL: ${OLLAMA_BASE_URL:-}
    ports:
      - '${API_PORT:-8000}:8000'
    volumes:
      - ./apps/api:/app/api:ro
      - ./packages:/app/packages:ro
      - ./infrastructure/logs:/app/logs
    networks:
      agentlab-network:
        ipv4_address: 172.20.0.13
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8000/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    security_opt:
      - no-new-privileges:true
    user: '1000:1000'

  web:
    build:
      context: .
      dockerfile: ./infrastructure/docker/web/Dockerfile
      target: development
    container_name: agentlab-web
    restart: unless-stopped
    environment:
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:8000}
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3000}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      NODE_ENV: ${NODE_ENV:-development}
    ports:
      - '${WEB_PORT:-3000}:3000'
    volumes:
      - ./apps/web:/app/web:ro
      - ./packages:/app/packages:ro
      - node_modules_cache:/app/web/node_modules
      - node_modules_cache:/app/packages/types/node_modules
      - node_modules_cache:/app/packages/ui/node_modules
      - node_modules_cache:/app/packages/utils/node_modules
    networks:
      agentlab-network:
        ipv4_address: 172.20.0.14
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/api/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    security_opt:
      - no-new-privileges:true
    user: '1000:1000'
