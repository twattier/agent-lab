# Network Security Policies for AgentLab
# Kubernetes NetworkPolicy definitions for service isolation

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: agentlab-default-deny-all
  namespace: agentlab
spec:
  podSelector: {}
  policyTypes:
    - Ingress
    - Egress

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: agentlab-allow-nginx-ingress
  namespace: agentlab
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: nginx
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from: [] # Allow from any source
      ports:
        - protocol: TCP
          port: 80
        - protocol: TCP
          port: 443
  egress:
    - to:
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: web
      ports:
        - protocol: TCP
          port: 3000
    - to:
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: api
      ports:
        - protocol: TCP
          port: 8000

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: agentlab-allow-web-to-api
  namespace: agentlab
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: web
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: nginx
      ports:
        - protocol: TCP
          port: 3000
  egress:
    - to:
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: api
      ports:
        - protocol: TCP
          port: 8000
    # Allow DNS resolution
    - to: []
      ports:
        - protocol: UDP
          port: 53

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: agentlab-allow-api-to-database
  namespace: agentlab
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: api
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: nginx
      ports:
        - protocol: TCP
          port: 8000
    - from:
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: web
      ports:
        - protocol: TCP
          port: 8000
  egress:
    - to:
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: postgres
      ports:
        - protocol: TCP
          port: 5432
    - to:
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: redis
      ports:
        - protocol: TCP
          port: 6379
    # Allow external API calls (Claude, OpenAI, etc.)
    - to: []
      ports:
        - protocol: TCP
          port: 443
    # Allow DNS resolution
    - to: []
      ports:
        - protocol: UDP
          port: 53

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: agentlab-isolate-database
  namespace: agentlab
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: postgres
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: api
      ports:
        - protocol: TCP
          port: 5432
  egress: [] # No outbound connections allowed

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: agentlab-isolate-redis
  namespace: agentlab
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: redis
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: api
      ports:
        - protocol: TCP
          port: 6379
  egress: [] # No outbound connections allowed

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: agentlab-allow-monitoring
  namespace: agentlab
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/component: monitoring
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: nginx
      ports:
        - protocol: TCP
          port: 3000 # Grafana
        - protocol: TCP
          port: 9090 # Prometheus
  egress:
    # Allow monitoring to scrape all services
    - to:
        - podSelector: {}
      ports:
        - protocol: TCP
          port: 8000 # API metrics
        - protocol: TCP
          port: 3000 # Web metrics
        - protocol: TCP
          port: 9187 # PostgreSQL exporter
        - protocol: TCP
          port: 9121 # Redis exporter
    # Allow DNS resolution
    - to: []
      ports:
        - protocol: UDP
          port: 53
